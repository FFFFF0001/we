<?php
/**
 * 会员注册
 */
namespace User\Controller;
use Common\Controller\HomebaseController;
class RegisterController extends HomebaseController {
	protected $UserModel,$organModel;
	function _initialize()
	{
		parent::_initialize(); // TODO: Change the autogenerated stub
		$this->UserModel=M('Users');
		$this->organModel=M('organization');
	}
	public function index(){
	    if(sp_is_user_login()){ //已经登录时直接跳到首页
	        redirect(__ROOT__."/");
	    }else{
	        $this->display(":register");
	    }
	}
	public function primary_register(){
		$this->display(":primary_register");
	}
	public function organization_register(){
		$this->display(":organization_register");
	}
	public function step2(){
		$this->display(":step2");
	}
	public function step3(){
		$this->display(":step3");
	}
	public function do_organize_reg(){
		$usr = $this->UserModel;
		$organ = D("Common/organization");


		$usr_rules = array(
			array('user_email','require','邮箱不能为空',0),
			array('user_email','email','邮箱格式不正确',0),
			array('user_email','','邮箱帐号已经存在！',0,'unique'),
			array('user_pass','require','密码不能为空',0),
			array('user_pass','/[a-zA-Z0-9]\w{5,15}$/','密码必须为字母数字，长度在5跟15之间',0,'regex'),
			array('user_repass','user_pass','确定密码跟密码不一致',0,'confirm'),
			array('mobile','/^1[3|4|5|7|8][0-9]\\d{8}$/','手机号码格式不对',0,'regex'),
			array('mobile','','手机号码已经存在！',0,'unique'),
		);
		/*if(!sp_check_verify_code()){
			$this->error("验证码错误");
		}else */if(!$usr->validate($usr_rules)->create()){
			$this->error($usr->getError());
		}else if(!$organ->create()){
			$this->error($organ->getError());
		}else{
			$data = array(
				'user_login'=>I('user_email'),
				'user_pass'=>sp_password(I('user_pass')),
				'user_nicename'=>'',
				'user_email'=>I('user_email'),
				'sex'=>0,
				'last_login_ip'=>get_client_ip(),
				'last_login_time'=>date("Y-m-d H:i:s"),
				'create_time'=>date("Y-m-d H:i:s"),
				'user_status'=>2,
				'user_type'=>1,
				'mobile'=>I('mobile'),
			);

			if($usr->add($data)){
				$rst = $usr->where(array('user_email'=>$data['user_email']))->find();
				$id = $rst['id'];
				//organzation表增加
				$organ->users_id=$id;
				$organ->add();
				//改hash
				$usr->where(array('id'=>$id))->save(array('user_activation_key'=>$id.time().uniqid()));
				$roleModel = M('role_user');
				//写入role_user表
				$roleModel->add(array('role_id'=>2,'user_id'=>$id));
				//登入成功页面跳转
				$data['id']=$rst;

				$_SESSION['user']=$rst;
				//发送激活邮件
					$this->_send_to_active();
					$email = $data['user_email'];
					setcookie('rgEmail',$email,time()+60*30);
					unset($_SESSION['user']);
					/*$this->success("注册成功，激活后才能使用！",U("user/login/index"));*/
					$this->redirect("register/step2");

			}else{
				$this->error('add失败');
			}
		}
	}
	public function repeatSendEm(){
		$option = M('Options')
					->where(array('option_name'=>'member_email_active'))
					->find();
		if(!$option){
			$this->error('网站未配置账号激活信息，请联系网站管理员');
		}
		$options = json_decode($option['option_value'], true);
		$cookEm = I('cookie.rgEmail');
		if(!$cookEm){
			$this->error('请求超时，请重新注册');
		}
		$UserModel = M('users');
		$rst = $UserModel->where(array('user_email'=>$cookEm))
					->find();
		$uid = $rst['id'];//序号
		$username = $rst['user_login'];//登录名
		$activekey=md5($uid.time().uniqid());
	
		$result=$UserModel->where(array("id"=>$uid))->save(array("user_activation_key"=>$activekey));
		if(!$result){
			$this->error('激活码生成失败！');
		}
		//邮件标题
		$title = $options['title'];//生成激活链接
		$url = U('user/register/active',array("hash"=>$activekey), "", true);
		//邮件内容
		$template = $options['template'];
		
		$content = str_replace(array('http://#link#','#username#'), array($url,$username),$template);
		$send_result=sp_send_email($cookEm, $title, $content);
	
		if($send_result['error']){
			$this->error('激活邮件发送失败，请尝试登录后，手动发送激活邮件！');
		}
	}
	function doregister(){
    	
    	if(isset($_POST['email'])){
    	    
    	    //邮箱注册
    	    $this->_do_email_register();
    	    
    	}elseif(isset($_POST['mobile'])){
    	    
    	    //手机号注册
    	    $this->_do_mobile_register();
    	    
    	}else{
    	    $this->error("注册方式不存在！");
    	}
    	
	}
	
	private function _do_mobile_register(){
	     
	    if(!sp_check_mobile_verify_code()){
	            $this->error("手机验证码错误！");
        }
        $rules = array(
            //array(验证字段,验证规则,错误提示,验证条件,附加规则,验证时间)
            array('mobile', 'require', '手机号不能为空！', 1 ),
            array('password','require','密码不能为空！',1),
        );
        	
	    $users_model=M("Users");
	     
	    if($users_model->validate($rules)->create()===false){
	        $this->error($users_model->getError());
	    }
	     
	    $password=$_POST['password'];
	    $mobile=$_POST['mobile'];
	     
	    if(strlen($password) < 5 || strlen($password) > 20){
	        $this->error("密码长度至少5位，最多20位！");
	    }
	     
	    
	    $where['mobile']=$mobile;
	     
	    $users_model=M("Users");
	    $result = $users_model->where($where)->count();
	    if($result){
	        $this->error("手机号已被注册！");
	    }else{

	        $data=array(
	            'user_login' => '',
	            'user_email' => '',
	            'mobile' =>$_POST['mobile'],
	            'user_nicename' =>'',
	            'user_pass' => sp_password($password),
	            'last_login_ip' => get_client_ip(0,true),
	            'create_time' => date("Y-m-d H:i:s"),
	            'last_login_time' => date("Y-m-d H:i:s"),
	            'user_status' => 1,
	            "user_type"=>2,//会员
	        );
	        $rst = $users_model->add($data);
	        if($rst){
	            //登入成功页面跳转
	            $data['id']=$rst;
	            $_SESSION['user']=$data;
	            $this->success("注册成功！",__ROOT__."/");
	        
	        }else{
	            $this->error("注册失败！",U("user/register/index"));
	        }
	         
	    }
	}
	
	private function _do_email_register(){
	   
        if(!sp_check_verify_code()){
            $this->error("验证码错误！");
        }
        
        $rules = array(
            //array(验证字段,验证规则,错误提示,验证条件,附加规则,验证时间)
            array('email', 'require', '邮箱不能为空！', 1 ),
            array('password','require','密码不能为空！',1),
            array('repassword', 'require', '重复密码不能为空！', 1 ),
            array('repassword','password','确认密码不正确',0,'confirm'),
            array('email','email','邮箱格式不正确！',1), // 验证email字段格式是否正确
            	
        );
	    
	     
	    $users_model=M("Users");
	     
	    if($users_model->validate($rules)->create()===false){
	        $this->error($users_model->getError());
	    }
	     
	    $password=$_POST['password'];
	    $email=$_POST['email'];
	    $username=str_replace(array(".","@"), "_",$email);
	    //用户名需过滤的字符的正则
	    $stripChar = '?<*.>\'"';
	    if(preg_match('/['.$stripChar.']/is', $username)==1){
	        $this->error('用户名中包含'.$stripChar.'等非法字符！');
	    }
	     
// 	    $banned_usernames=explode(",", sp_get_cmf_settings("banned_usernames"));
	     
// 	    if(in_array($username, $banned_usernames)){
// 	        $this->error("此用户名禁止使用！");
// 	    }
	     
	    if(strlen($password) < 5 || strlen($password) > 20){
	        $this->error("密码长度至少5位，最多20位！");
	    }
	    
	    $where['user_login']=$username;
	    $where['user_email']=$email;
	    $where['_logic'] = 'OR';
	    
	    $ucenter_syn=C("UCENTER_ENABLED");
	    $uc_checkemail=1;
	    $uc_checkusername=1;
	    if($ucenter_syn){
	        include UC_CLIENT_ROOT."client.php";
	        $uc_checkemail=uc_user_checkemail($email);
	        $uc_checkusername=uc_user_checkname($username);
	    }
	     
	    $users_model=M("Users");
	    $result = $users_model->where($where)->count();
	    if($result || $uc_checkemail<0 || $uc_checkusername<0){
	        $this->error("用户名或者该邮箱已经存在！");
	    }else{
	        $uc_register=true;
	        if($ucenter_syn){
	             
	            $uc_uid=uc_user_register($username,$password,$email);
	            //exit($uc_uid);
	            if($uc_uid<0){
	                $uc_register=false;
	            }
	        }
	        if($uc_register){
	            $need_email_active=C("SP_MEMBER_EMAIL_ACTIVE");
	            $data=array(
	                'user_login' => $username,
	                'user_email' => $email,
	                'user_nicename' =>$username,
	                'user_pass' => sp_password($password),
	                'last_login_ip' => get_client_ip(0,true),
	                'create_time' => date("Y-m-d H:i:s"),
	                'last_login_time' => date("Y-m-d H:i:s"),
	                'user_status' => $need_email_active?2:1,
	                "user_type"=>2,//会员
	            );
	            $rst = $users_model->add($data);
	            if($rst){
	                //登入成功页面跳转
	                $data['id']=$rst;
	                $_SESSION['user']=$data;
	                	
	                //发送激活邮件
	                if($need_email_active){
	                    $this->_send_to_active();
						setcookie('rgEmail',$email,time()+60*30);
	                    unset($_SESSION['user']);
	                    /*$this->success("注册成功，激活后才能使用！",U("user/login/index"));*/
	                    $this->redirect("register/step2");
	                }else {
	                    $this->success("注册成功！",__ROOT__."/");
	                }
	                	
	            }else{
	                $this->error("注册失败！",U("user/register/index"));
	            }
	             
	        }else{
	            $this->error("注册失败！",U("user/register/index"));
	        }
	         
	    }
	}
	
	function active(){
		$hash=I("get.hash","");
		if(empty($hash)){
			$this->error("激活码不存在");
		}
		
		$users_model=M("Users");
		$find_user=$users_model->where(array("user_activation_key"=>$hash))->find();
		
		if($find_user){
			//判断是不是管理员 管理员还要审核
			if($find_user['user_type']==1){
				$result=$users_model->where(array("user_activation_key"=>$hash))->save(array("user_activation_key"=>"","user_status"=>3));
			}else{
				$result=$users_model->where(array("user_activation_key"=>$hash))->save(array("user_activation_key"=>"","user_status"=>1));
			}
			if($result){
				$find_user['user_status']=1;
				$_SESSION['user']=$find_user;
				setcookie("rgEmail","",time()-1);
				$this->redirect("register/step3");
			}else{
				$this->error("用户激活失败!",U("user/login/index"));
			}
		}else{
			$this->error("用户激活失败，激活码无效！",U("user/login/index"));
		}
		
		
	}
	
	
}