<?php
// | Create: 2016/4/23 
// +----------------------------------------------------------------------
// | Author: 海枯 <haiku888@foxmail.com> 
// +----------------------------------------------------------------------
// | Description:  
// +----------------------------------------------------------------------

namespace Portal\Controller;


use Common\Controller\HomebaseController;

class ActivityController extends HomebaseController
{
    protected $activityModel,$optionModel,$joinModel;
    function _initialize()
    {
        $this->activityModel = D('Common/Activity');
        $this->optionModel = M('options');
        $this->joinModel = D('Common/ActivityJoin');
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    function index(){
        $parm_property = I('get.property');
        $parm_types = I('get.types');
        $parm_times = I('get.times');
        $parm_status = I('get.status');
        $parm_keywords = I('get.keywords');
        //定义为空，merge不会出错
        $prpWhere=[];$typeWhere=[];$statusWhere=[];$timeStatus=[];$kwWhere=[];

        if (!empty($parm_keywords)) {
            $kwWhere = array('activity_name' => $parm_keywords);
        }
        if (!empty($parm_property)) {    //活动性质
            if ($parm_property=="全部") {
                $prpWhere = [];
            }else{
                $prpWhere = array('property' => $parm_property);
            }
        }
        if (!empty($parm_types)) {    //活动分类
            if ($parm_types=="全部") {
                $typeWhere = [];
            }else{
                $typeWhere = array('type' => $parm_types);
            }
        }
        if (!empty($parm_status)) {     //活动状态
            $statusWhere = $this->statusCondition($parm_status);
        }
        if (!empty($parm_times)) {    //活动时间
            $timeStatus = $this->timesCondition($parm_times);
        }

        $wheres = array_merge($prpWhere, $typeWhere, $statusWhere, $timeStatus, $kwWhere);

        $join = C('DB_PREFIX')."organization as b ON a.user_id=b.users_id";

        $count = $this->activityModel
            ->alias("a")
            ->where($wheres)
            ->join($join)
            ->count();

        $page = $this->page($count, 4);

        $activitys = $this->activityModel
            ->alias("a")
            ->join($join)
            ->where($wheres)
            ->order("id desc")
            ->limit($page->firstRow.','.$page->listRows)
            ->select();

        $afters = NullActivityCover($activitys);

        $this->assign('activitys', $afters);
        $this->assign('Page', $page->show('Admin'));
        //option参数
        $this->optionSet();

        $this->display();
    }

    /**状态条件数组
     * @param $status
     * @return array
     */
    function statusCondition($status)
    {
        $current_time = time();
        if ($status == 0) {
            $where = [];
        }else if($status==1){   //招募中
            $where = array('start_time' => array('gt', $current_time));
        }else if($status==2){   //已结束
            $where = array('end_time' => array('lt' , $current_time,'activity_status'=>1,'_logic'=>'or')
                            );
        }else if($status==3){   //进行中
            $where = array('start_time' => array('lt' , $current_time),
                'end_time' => array('gt' , $current_time));
        }
        return $where;
    }

    /**时间条件数组
     * @param $time
     */
    function timesCondition($time)
    {
        //今天
        $todayS = mktime(0, 0, 0, date("m"), date('d'), date('y'));
        $todayE = mktime(0, 0, 0, date('m'),date('d')+1,date('Y'))-1;

        //明天
        $mtS = mktime(0, 0, 0, date("m"), date('d')+1, date('y'));
        $mtE = mktime(0, 0, 0, date("m"), date('d')+2, date('y'))-1;

        $weekday = date('w');

        //最近一周
        $weekS = $weekday==0?mktime(0, 0, 0, date('m'), date('d')-6, date('Y')):mktime(0, 0, 0, date('m'), date('d') - date('w') + 1, date('Y'));
        $weekE = $weekday==0?mktime(23, 59, 59, date('m'), date('d'), date('Y')):mktime(23, 59, 59, date('m'), date('d') - date('w') + 7, date('Y'));

        //当周周末
        //当前是周日时，周末只限制周日
        $weekSunS = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $weekSunE = mktime(23, 59, 59, date('m'), date('d'), date('Y'));

        $weekendS =date('w')==6?$weekSunS:mktime(0, 0, 0, date('m'), date('d') + 6 - date('w'), date('Y'));

        $weekendE = date('w')==6?mktime(23, 59, 59, date('m'), date('d')+1, date('Y')):mktime(23, 59, 59, date('m'), date('d') + 7 - date('w'), date('Y'));

        //当前月
        $monthS=mktime(0,0,0,date('m'),1,date('Y'));
        $monthE=mktime(23,59,59,date('m'),date('t'),date('Y'));
        if ($time == 0) {
            $where = [];
        }else if($time==1){   //今天
            $where = array('start_time' => array('lt' , $todayS),
                                'end_time' => array('gt' , $todayE));
        }else if($time==2){   //明天
            $where = array('start_time' => array('lt' , $mtS),
                'end_time' => array('gt' , $mtE));
        }else if($time==3){   //周末
            if ($weekday == 0) {        //周日特殊处理
                $where = array('start_time' => array('lt' , $weekSunS),
                    'end_time' => array('gt' , $weekSunE));
            }else{
                $where = array('start_time' => array('lt' , $weekendS),
                    'end_time' => array('gt' , $weekendE));
            }

        }else if($time==4){   //最近一周
            $where = array('start_time' => array('lt' , $weekS),
                'end_time' => array('gt' , $weekE));
        }else if($time==5){   //一个月
            $where = array('start_time' => array('lt' , $monthS),
                'end_time' => array('gt' , $monthE));
        }
        return $where;
    }
    /**
     * 选择条件配置项json assign
     */
    function optionSet()
    {
        //活动状态
        $status = $this->optionModel->where(array('option_name' => 'activity_status'))->find();
        //活动类型
        $types = $this->optionModel->where(array('option_name' => 'activity_type'))->find();
        //活动时间
        $times = $this->optionModel->where(array('option_name' => 'activity_time'))->find();
        //活动性质
        $property = $this->optionModel->where(array('option_name' => 'activity_property'))->find();

        $this->assign('status', json_decode($status['option_value']));
        $this->assign('types',  json_decode($types['option_value']));
        $this->assign('times',  json_decode($times['option_value']));
        $this->assign('property',  json_decode($property['option_value']));
    }

    /**
     * 创建活动tpl
     */
    function add_activity()
    {
        if (!sp_is_user_login()) {
            $this->error("请登陆后重试");
        }else if(!sp_auth_check(sp_get_current_userid(),"portal/topic/topicadd")){
            $this->error("权限不足，只有组织用户才能创建活动");
        }else{
            //活动类型
            $types = $this->optionModel->where(array('option_name' => 'activity_type'))->find();
            //活动性质
            $property = $this->optionModel->where(array('option_name' => 'activity_property'))->find();
            $this->assign('types',  json_decode($types['option_value']));
            $this->assign('property',  json_decode($property['option_value']));
        }
        $this->display();
    }

    /**
     * 新增活动ajax
     */
    function do_activity_add(){
        if (!sp_is_user_login()) {
            $this->error("请登陆后重试");
        }else if(!sp_auth_check(sp_get_current_userid(),"portal/group/group_add")){
            $this->error("权限不足，只有组织用户才能创建活动");
        }else if (!$this->activityModel->create()) {

            $this->error($this->activityModel->getError());
        }else if(!sp_check_verify_code()){
            $this->error('验证码错误，请重试输入');
        }else{
            $id=$this->activityModel->add();
            if ($id) {
                $ecode = StrCode($id);
                $this->success('新增活动成功',U('add_activity#upload_cover',array('id'=>$ecode)));
            }else{
                $this->error('新增失败，未知原因');
            }
        }
    }

    /**
     * 上传活动封面tpl
     */
    function upload_cover()
    {
        $aid = StrCode(I('get.id'),'DECODE');//参数解密
        $ActivityModel = M('activity');
        header('Content-type: text/json');
        $post_input = 'php://input';
        $postdata = file_get_contents( $post_input );   //获取数据转成一个字符串
        $img = str_replace('data:image/png;base64,', '', $postdata);
        $img = str_replace(' ', '+', $img);

        $data = base64_decode($img);    //解码base64

        $uq = uniqid();
        $file = './data/upload/activity_cover/'. $uq . '.png';    //文件命名

        /*删除原来的头像*/
        $hasAvatar = $ActivityModel->where(array('id' => $aid))->find();
        $prevAvatar = $hasAvatar['cover'];
        if(!$hasAvatar){
            $this->error('非法参数！');
        }else if (!empty($prevAvatar)) {
            unlink("./data/upload/activity_cover/$prevAvatar");
        }

        $ActivityModel
            ->where(array('id'=>$aid))
            ->save(array('cover'=>$uq.'.png'));

        $success = file_put_contents($file, $data);
        if($success){
            $this->success('上传成功！');
        }
        else{
            $this->error('上传失败！');
        }
    }

    /**
     * 活动详情tpl
     */
    function activity_detail()
    {
        $id = I('get.id');
        $join = C('DB_PREFIX')."organization as b ON a.user_id=b.users_id";
        $act_details = $this->activityModel
            ->alias("a")
            ->join($join)
            ->where(array('id'=>$id))
            ->find();
        $act_details = NullActivityCover($act_details);
        $this->assign('details', $act_details);

        //显示报名信息
        $baomings = $this->joinModel->alias('a')
            ->join(C('DB_PREFIX')."activity as b ON a.activity_id=b.id")
            ->join(C('DB_PREFIX')."users as c ON a.user_id=c.id")
            ->where(array('a.activity_id'=>$id))
            ->field('user_nicename,avatar,join_time')
            ->select();
        $baomings = UserAvatar($baomings);
        //报名人数
        $baomingsCount = $this->joinModel->alias('a')
            ->join(C('DB_PREFIX')."activity as b ON a.activity_id=b.id")
            ->join(C('DB_PREFIX')."users as c ON a.user_id=c.id")
            ->where(array('a.activity_id'=>$id))
            ->count();
        $this->assign('baomingsCount', $baomingsCount);
        $this->assign('baomings', $baomings);
        //判断用户是否已经报名
        $isbaoming = $this->joinModel->where(array('activity_id'=>$id,'user_id'=>sp_get_current_userid()))->count();
        $this->assign('isbaoming', $isbaoming == 0 ? false : true);

        $this->display();
    }

    /**
     * 加入活动表单tpl
     */
    function join(){
        $id = I('get.id');
        $join = C('DB_PREFIX')."organization as b ON a.user_id=b.users_id";
        if (sp_is_user_login()) {
            $act_details = $this->activityModel
                ->alias("a")
                ->join($join)
                ->where(array('id'=>$id))
                ->find();
            $act_details = NullActivityCover($act_details);
            $this->assign('details', $act_details);
        }else{
            $this->error('请先登录');
        }

        $this->display();
    }

    /**
     * 提交加入活动表单ajax
     */
    function join_action()
    {
        $act_id = I('post.activity_id');
        if (sp_is_user_login()) {
            $uid = sp_get_current_userid();
            $joinRsg = $this->joinModel->where(array('activity_id'=>$act_id,'user_id'=>$uid,'join_status'=>0))->count();
            if($joinRsg>0){
                $this->error("您已报名，请等待审核，请留意站内通知以及你的邮箱");
            }else if (!$this->joinModel->create()) {
                $this->error($this->joinModel->getError());
            }else{
                $this->joinModel->add();
                $this->success('报名活动成功，请等待组织用户的审核，请留意站内通知以及你的邮箱。',U('activity_detail',array('id'=>$act_id)));
            }
        }else{
            $this->error('请先登录');
        }

    }
}